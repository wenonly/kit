import{_ as s,a as e,o as a,W as t}from"./chunks/framework.CJwJD4JI.js";const u=JSON.parse('{"title":"开发环境建立自签名证书，运行https网站","description":"","frontmatter":{"title":"开发环境建立自签名证书，运行https网站","categories":"杂谈日记","date":"2023-10-16 14:23","tags":["部署","安全","https"]},"headers":[],"relativePath":"posts/杂谈日记/2023/开发环境建立自签名证书，运行https网站.md","filePath":"posts/杂谈/4.开发环境建立自签名证书，运行https网站/README.md","lastUpdated":1723020021000}'),i={name:"posts/杂谈日记/2023/开发环境建立自签名证书，运行https网站.md"},l=t(`<h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>HTTPS是互联网上保护数据传输安全性的标准之一。在开发和测试环境中，我们经常使用自签名SSL证书来启用HTTPS连接。然而，有时候在配置HTTPS服务器时，可能会出现一些问题，特别是关于SSL证书和私钥的配置。</p><h2 id="什么是自签名ssl证书" tabindex="-1">什么是自签名SSL证书？ <a class="header-anchor" href="#什么是自签名ssl证书" aria-label="Permalink to &quot;什么是自签名SSL证书？&quot;">​</a></h2><p>自签名SSL证书是由服务器自行签发，而不是由受信任的第三方证书颁发机构（CA）签发的SSL证书。这意味着它没有经过公共信任的验证，因此在生产环境中通常不建议使用。自签名SSL证书用于测试、开发或内部服务器的情况，它可以提供加密连接，但客户端（如浏览器）通常会警告用户它不是受信任的证书。</p><h2 id="生成自签名ssl证书" tabindex="-1">生成自签名SSL证书 <a class="header-anchor" href="#生成自签名ssl证书" aria-label="Permalink to &quot;生成自签名SSL证书&quot;">​</a></h2><p>生成自签名SSL证书通常需要以下步骤：</p><ol><li>生成私钥：使用openssl工具生成私钥，这是一个用于加密和解密数据的关键。</li><li>生成证书请求（CSR）：CSR文件包含有关服务器和组织的信息以及公钥，它用于向证书颁发机构请求签发SSL证书。</li><li>自签名证书：使用生成的CSR文件和私钥，签发自签名SSL证书。</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> req -newkey rsa:2048 -new -nodes -keyout key.pem -out csr.pem</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x509 -req -days </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">365</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -in csr.pem -signkey key.pem -out server.crt</span></span></code></pre></div><p>其中<code>key.pem</code>是私钥，<code>csr.pem</code>是证书请求文件，<code>server.crt</code>是使用证书请求文件生成的SSL证书。 通常正式环境<code>server.crt</code>由受信任的CA签发。</p><h2 id="使用http-server运行ssl网站" tabindex="-1">使用http-server运行ssl网站 <a class="header-anchor" href="#使用http-server运行ssl网站" aria-label="Permalink to &quot;使用http-server运行ssl网站&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http-server -C server.crt -K key.pem -S .</span></span></code></pre></div><h2 id="ssl的工作原理" tabindex="-1">SSL的工作原理 <a class="header-anchor" href="#ssl的工作原理" aria-label="Permalink to &quot;SSL的工作原理&quot;">​</a></h2><p>SSL的工作原理可以概括为以下步骤：</p><ol><li>客户端向服务器请求建立安全连接：客户端向服务器发送连接请求，并请求使用SSL。</li><li>服务器发送证书：服务器将其SSL证书（server.crt）发送给客户端，证明其身份。</li><li>客户端验证证书：客户端验证证书的有效性，包括检查证书是否由受信任的CA签发，并检查证书是否已过期。</li><li>密钥交换：如果证书验证成功，客户端生成一个随机的对称密钥，并使用服务器的公钥（包含在SSL证书中）对其进行加密，然后将其发送给服务器。</li><li>数据加密和通信：服务器使用自己的私钥来解密客户端发送的对称密钥，然后客户端和服务器都使用对称密钥来加密和解密通信中的数据。</li><li>建立安全连接：客户端和服务器现在可以安全地通信，数据在传输过程中受到加密保护。</li></ol><p>SSL确保了安全的数据传输，防止中间人攻击和数据泄漏。私钥、CSR和证书是SSL协议中关键的组成部分，确保了通信的安全性和可信性。</p>`,15),r=[l];function p(h,o,n,d,c,S){return a(),e("div",null,r)}const _=s(i,[["render",p]]);export{u as __pageData,_ as default};
