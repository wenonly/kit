import{_ as t,a as e,o as a,W as i}from"./chunks/framework.CJwJD4JI.js";const u=JSON.parse('{"title":"LottieWrapper","description":"","frontmatter":{},"headers":[],"relativePath":"react-components/LottieWrapper.md","filePath":"packages/react-components/src/components/LottieWrapper/README.md","lastUpdated":1719398030000}'),s={name:"react-components/LottieWrapper.md"},d=i('<h1 id="lottiewrapper" tabindex="-1">LottieWrapper <a class="header-anchor" href="#lottiewrapper" aria-label="Permalink to &quot;LottieWrapper&quot;">​</a></h1><p>使用<code>lottie-web</code>显示动画的组件</p><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LottieWrapper</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{styles.bg} </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/lottie/背景边框_动效/data.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} /&gt;</span></span></code></pre></div><h2 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h2><h3 id="lottieprops" tabindex="-1">LottieProps <a class="header-anchor" href="#lottieprops" aria-label="Permalink to &quot;LottieProps&quot;">​</a></h3><table tabindex="0"><thead><tr><th>key</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>path</td><td>string | undefined</td><td>动画地址</td></tr><tr><td>style</td><td>React.CSSProperties | undefined</td><td>style</td></tr><tr><td>className</td><td>string | undefined</td><td>class</td></tr><tr><td>clip</td><td>ClipOptions | undefined</td><td>裁剪</td></tr><tr><td>onLoopComplete</td><td>(() =&gt; void) | undefined</td><td>loopComplete 事件监听</td></tr></tbody></table><h3 id="clipoptions" tabindex="-1">ClipOptions <a class="header-anchor" href="#clipoptions" aria-label="Permalink to &quot;ClipOptions&quot;">​</a></h3><table tabindex="0"><thead><tr><th>key</th><th>类型</th></tr></thead><tbody><tr><td>originalWidth</td><td>Property.Width&lt;string | number&gt; | undefined</td></tr><tr><td>originalHeight</td><td>Property.Height&lt;string | number&gt; | undefined</td></tr><tr><td>clipLeft</td><td>Property.Left&lt;string | number&gt; | undefined</td></tr><tr><td>clipTop</td><td>Property.Top&lt;string | number&gt; | undefined</td></tr></tbody></table>',9),r=[d];function o(n,p,l,h,c,k){return a(),e("div",null,r)}const b=t(s,[["render",o]]);export{u as __pageData,b as default};
