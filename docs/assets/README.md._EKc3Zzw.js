import{_ as s,a,o as i,W as e}from"./chunks/framework.CJwJD4JI.js";const u=JSON.parse('{"title":"Kit","description":"","frontmatter":{},"headers":[],"relativePath":"README.md","filePath":"README.md","lastUpdated":1723021578000}'),t={name:"README.md"},n=e(`<h1 id="kit" tabindex="-1">Kit <a class="header-anchor" href="#kit" aria-label="Permalink to &quot;Kit&quot;">​</a></h1><p>当前文档最初只是用于打包组件库，并展示组件库的文档，后面不断扩展就将博客迁移到了当前文档中。</p><p><code>Kit</code>代表成套的工具，我计划将开发过程中好用的工具都放在这里，打包并生成方便查看的文档，能够在文档中直接预览组件的效果。</p><h2 id="文档语法" tabindex="-1">文档语法 <a class="header-anchor" href="#文档语法" aria-label="Permalink to &quot;文档语法&quot;">​</a></h2><p>本项目文档使用<a href="https://vitepress.dev/" target="_blank" rel="noreferrer">vitepress</a>，详细语法阅读<a href="https://vitepress.dev/guide/markdown" target="_blank" rel="noreferrer">文档</a>。 又对<code>vitepress</code>进行了一些扩展。</p><h3 id="扩展内容" tabindex="-1">扩展内容 <a class="header-anchor" href="#扩展内容" aria-label="Permalink to &quot;扩展内容&quot;">​</a></h3><ol><li>读取typescript文件中的interface，生成文档表格。这样只需要在编写库的时候定义好类型，在文档中引入文件即可按表格展示库的参数说明。</li></ol><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 文件路径::params:InterfaceName --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;&lt;&lt; @/packages/kit/src/utils/index.ts::params:IConfig</span></span></code></pre></div><ol start="2"><li>可以在文档或主题中导入博客数据列表</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blogConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;config:blog&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="编译所有packages目录中的库" tabindex="-1">编译所有packages目录中的库 <a class="header-anchor" href="#编译所有packages目录中的库" aria-label="Permalink to &quot;编译所有packages目录中的库&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run build</span></span></code></pre></div><h2 id="发布packages目录中编译好的库" tabindex="-1">发布packages目录中编译好的库 <a class="header-anchor" href="#发布packages目录中编译好的库" aria-label="Permalink to &quot;发布packages目录中编译好的库&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 生成变更集</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changeset</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 修改版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changeset version</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 发布</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changeset publish</span></span></code></pre></div>`,14),l=[n];function p(h,r,o,d,c,k){return i(),a("div",null,l)}const m=s(t,[["render",p]]);export{u as __pageData,m as default};
