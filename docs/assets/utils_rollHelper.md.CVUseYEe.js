import{_ as s,a as i,o as a,W as l}from"./chunks/framework.CJwJD4JI.js";const c=JSON.parse('{"title":"rollHelper","description":"","frontmatter":{},"headers":[],"relativePath":"utils/rollHelper.md","filePath":"packages/utils/src/rollHelper.md","lastUpdated":1718085675000}'),n={name:"utils/rollHelper.md"},t=l(`<h1 id="rollhelper" tabindex="-1">rollHelper <a class="header-anchor" href="#rollhelper" aria-label="Permalink to &quot;rollHelper&quot;">​</a></h1><h2 id="rollcreator" tabindex="-1">rollCreator <a class="header-anchor" href="#rollcreator" aria-label="Permalink to &quot;rollCreator&quot;">​</a></h2><p>轮询工具函数，很多场景需要循环间隔请求数据，比如轮询检查登录状态，轮询检查订单状态等。这个函数保证上一个 promise 完成后再执行下一个 promise，始终保持执行的任务只有一条。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rollTime: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">POLL_CONTROL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">POLL_INTERVAL_TIME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rollErrorMaxTimes: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">POLL_CONTROL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_ERROR_ROLL_TIMES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rollWhenError: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 轮询检查登录状态</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> stopCheckLogin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rollCreator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.eventSourceService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">checkIsLoginMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sub.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { isContinue: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, status: result.data.status };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, options)();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 停止轮训</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stopCheckLogin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>`,4),h=[t];function e(p,k,r,E,o,d){return a(),i("div",null,h)}const y=s(n,[["render",e]]);export{c as __pageData,y as default};
