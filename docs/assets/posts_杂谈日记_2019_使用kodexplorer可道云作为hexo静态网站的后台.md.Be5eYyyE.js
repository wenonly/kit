import{_ as e,a as s,o as a,W as o}from"./chunks/framework.CJwJD4JI.js";const p="/kit/assets/kod.D9OyCaqi.png",x=JSON.parse('{"title":"使用kodexplorer可道云作为hexo静态网站的后台","description":"","frontmatter":{"title":"使用kodexplorer可道云作为hexo静态网站的后台","date":"2019-11-11T17:34:22.000Z","categories":"杂谈日记","tags":["kodexplorer","hexo","linux","supervisor","nginx"]},"headers":[],"relativePath":"posts/杂谈日记/2019/使用kodexplorer可道云作为hexo静态网站的后台.md","filePath":"posts/杂谈/1.使用kodexplorer可道云作为hexo静态网站的后台/README.md","lastUpdated":1722912510000}'),n={name:"posts/杂谈日记/2019/使用kodexplorer可道云作为hexo静态网站的后台.md"},c=o('<p>hexo是一个很方便的静态博客系统，但是硬伤方就是没有后台，每次编写了<code>markdown</code>文件之后都需要运行构建命令，非常麻烦。为了解决这个问题，hexo提供了一个专门的插件叫<code>hexo-admin</code>，能够在web下提供增删改查的功能。虽然很方便而且功能齐全，但是<code>hexo-admin</code>的管理界面却不够美观，为了能够使用更加美观的界面，我放弃了<code>hexo-admin</code>，转而选择了<code>kodexplorer</code>可道云。</p><p>需要注意的是，本文介绍的方法需要服务器环境，因为<code>kodexplorer</code>需要服务器环境，<code>hexo</code>的静态页面构建也需要服务器环境。</p><p>那么有服务器为什么不选择<code>wordpress</code>等cms管理系统呢？因为<code>hexo</code>的主题很好看，并且文章都是<code>markdown</code>文件，管理简单，我只需要编写markdown文件。</p><h1 id="可道云介绍" tabindex="-1">可道云介绍 <a class="header-anchor" href="#可道云介绍" aria-label="Permalink to &quot;可道云介绍&quot;">​</a></h1><p><code>kodexplorer</code>可道云(原名芒果云) 是一款基于 PHP 开发的开源 WEB 网页版轻量级私有云网盘工具。准确的说它就是一款功能丰富的在线文件管理系统，它能很好的支持<code>markdown</code>文件的编写。</p><p>为什么我要选择<code>可道云</code>呢？</p><ul><li>界面美观</li><li>有现成的<code>markdown</code>编辑器</li><li>有回收站功能，不怕误删</li></ul><p><img src="'+p+`" alt="贪吃蛇demo展示"></p><h1 id="使用nginx部署hexo静态网站" tabindex="-1">使用nginx部署hexo静态网站 <a class="header-anchor" href="#使用nginx部署hexo静态网站" aria-label="Permalink to &quot;使用nginx部署hexo静态网站&quot;">​</a></h1><p>首先使用<code>hexo</code>需要<code>nodejs</code>环境，只需要去官网下载安装即可，这里不详细讲解安装方法。在安装好<code>nodejs</code>环境后运行命令。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm install hexo-cli -g</span></span></code></pre></div><p>然后在想要部署<code>hexo</code>的目录中运行命令生成<code>hexo</code>项目。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>hexo init &lt;folder&gt;</span></span></code></pre></div><p><code>hexo</code>很好用，这里不详细讲解<code>hexo</code>方法，可以在<a href="https://hexo.io/" target="_blank" rel="noreferrer">hexo官网</a>查看。 接下来需要安装<code>nginx</code>环境，我使用的<code>centos7</code>系统，可以通过<code>yum</code>命令安装。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>yum install nginx</span></span></code></pre></div><p>然后编辑<code>nginx</code>配置文件，需要将<code>hexo</code>项目中的<code>public</code>目录设定为网站目录。将<code>nginx</code>配置文件中的<code>root</code>设置为<code>public</code>目录。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>...</span></span>
<span class="line"><span>server {</span></span>
<span class="line"><span>    listen       80 default_server;</span></span>
<span class="line"><span>    listen       [::]:80 default_server;</span></span>
<span class="line"><span>    server_name  _;</span></span>
<span class="line"><span>    root         /var/www/hexo-blog/public/;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>...</span></span></code></pre></div><p>重启<code>nginx</code>的服务。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>service nginx restart</span></span></code></pre></div><p>之后就可以通过ip访问<code>hexo</code>静态网站了，端口为80端口。</p><h1 id="为nginx部署php环境-安装kodexplorer" tabindex="-1">为nginx部署php环境，安装kodexplorer <a class="header-anchor" href="#为nginx部署php环境-安装kodexplorer" aria-label="Permalink to &quot;为nginx部署php环境，安装kodexplorer&quot;">​</a></h1><p>1、首先需要安装<code>php</code>解释器</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>yum install php php-fpm -y</span></span></code></pre></div><p>2、然后启动PHP-FPM进程并加入开机启动项</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>systemctl start php-fpm</span></span>
<span class="line"><span>systemctl enable php-fpm</span></span></code></pre></div><p>3、启动之后，可以使用下面的命令查看 PHP-FPM 进程监听哪个端口</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[root@instance-yer9go4c ~]# netstat -nlpt | grep php-fpm</span></span>
<span class="line"><span>tcp  0  0 127.0.0.1:9000   0.0.0.0:*   LISTEN 2200/php-fpm: maste</span></span></code></pre></div><p>可以看出<code>php-fpm</code>占用的是9000端口。 4、现在配置<code>nginx</code>服务，进入<code>/etc/nginx/conf.d/</code>目录添加一个<code>php.conf</code>文件，内容如下。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>  listen 8000;</span></span>
<span class="line"><span>  server_name _;</span></span>
<span class="line"><span>  root /var/www/kodexplorer;</span></span>
<span class="line"><span>  index index.html index.php;</span></span>
<span class="line"><span>  location ~\\.php$ {</span></span>
<span class="line"><span>    fastcgi_pass 127.0.0.1:9000;</span></span>
<span class="line"><span>    include fastcgi.conf;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>这里将<code>root</code>配置成<code>kodexplorer</code>程序的目录，监听<code>8000</code>端口，<code>kodexplorer</code>可以在<a href="https://kodcloud.com/" target="_blank" rel="noreferrer">官网</a>下载。 然后重启<code>nginx</code>服务。就能在服务器的<code>8000</code>端口访问网站了，需要设置管理员密码。</p><h1 id="用supervisor设置hexo持续监听" tabindex="-1">用supervisor设置hexo持续监听 <a class="header-anchor" href="#用supervisor设置hexo持续监听" aria-label="Permalink to &quot;用supervisor设置hexo持续监听&quot;">​</a></h1><p><code>hexo</code>可以通过运行下面这条命令监听文件变化，并构建静态网页。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>hexo g --watch</span></span></code></pre></div><p>当我在<code>可道云</code>里面编辑<code>hexo</code>项目中的<code>markdown</code>文件时，<code>hexo</code>能随着文件保存而自动构建。 为了让监听的命令持续运行，我使用<code>supervisor</code>工具管理进程。首先安装<code>supervisor</code>。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>yum install supervisor -y</span></span></code></pre></div><p>然后在<code>/etc/supervisord.d/</code>中添加配置文件<code>blog.ini</code>，里面的内容如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[program:blog]</span></span>
<span class="line"><span>command=hexo g --watch</span></span>
<span class="line"><span>directory=/var/www/hexo-blog</span></span>
<span class="line"><span>autostart=true</span></span>
<span class="line"><span>autorestart=true</span></span></code></pre></div><p>启动<code>supervisor</code>服务。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>supervisord -c /etc/supervisor.conf</span></span></code></pre></div><p>之后就成功的通过<code>supervisor</code>管理<code>hexo</code>的监听进程了。 进入<code>可道云</code>编辑<code>markdown</code>文件后保存，静态网站就会自动更新。</p><p>注意：如果<code>可道云</code>没有当前目录的写权限，需要通过<code>chmod</code>命令修改目录的权限。</p>`,41),d=[c];function i(t,l,r,h,g,u){return a(),s("div",null,d)}const m=e(n,[["render",i]]);export{x as __pageData,m as default};
